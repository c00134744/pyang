#!/bin/bash

# Copyright (c) 2010 by Ladislav Lhotka, CESNET <lhotka@cesnet.cz>
#
# Translates YANG module(s) to DSDL schemas and validates instances
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Defaults for arguments
target="dstore"
basename=""
dir="."
instance=""
noschema=0

xslt_dir=${PYANG_XSLT_DIR:-/usr/local/share/yang/xslt}
rng_lib=${PYANG_RNG_LIBDIR:-/usr/local/share/yang/schema}/relaxng-lib.rng

usage() {
    cat <<EOF

Usage: yang2dsdl <options> <filename> ...

Generates DSDL schemas from YANG module(s).

Options:
  -h             Displays this help message and exits.
  -t <target>    Specifies the validation target. The argument <target>
                 must be one of: "dstore" (default), "get-reply",
                 "getconf-reply", "rpc", "rpc-reply" and "notif".
  -b <basename>  Specifies the basename of files in which the output
                 schemas are stored. The default is the concatenation
                 of the names of all input YANG modules connected
                 with the underscore character "_".
  -d <dir>       Specifies the directory for output files
                 (current directory by default).
  -v <instance>  Validates the instance document in file <instance>.
  -s             Performs just validation, without (re)generating
                 the schemas. Only allowed together with -v.
EOF
}

gen_relaxng() {
    echo "== Generating RELAX NG schema '$btname.rng'"
    xsltproc $XSLT_OPTS --output $btname.rng \
	--stringparam basename $basename \
        --stringparam target $target --stringparam rng-lib $rng_lib \
        $xslt_dir/gen-relaxng.xsl $hybs
    [[ $? == 0 ]] || fail
    xsltproc $XSLT_OPTS --output $dir/$basename-gdefs.rng \
	--stringparam basename $basename \
        --stringparam gdefs-only 1 $xslt_dir/gen-relaxng.xsl $hybs
    [[ $? == 0 ]] || fail
    echo "Done."
}

gen_schematron() {
    echo -e "\n== Generating Schematron schema '$btname.sch'"
    xsltproc $XSLT_OPTS --output $btname.sch \
        --stringparam target $target $xslt_dir/gen-schematron.xsl $hybs
    [[ $? == 0 ]] || fail
    echo "Done."
}

gen_dsrl() {
    echo -e "\n== Generating DSRL schema '$btname.dsrl'"
    xsltproc $XSLT_OPTS --output $btname.dsrl \
        --stringparam target $target $xslt_dir/gen-dsrl.xsl $hybs
    [[ $? == 0 ]] || fail
    echo "Done."
}

validate() {
    echo -e "\n== Validating grammar and datatypes ..."
    if [ -f $btname.rng ] ; then
        xmllint --noout --relaxng $btname.rng $instance
	[[ $? == 0 ]] || fail
    else
        echo "RELAX NG schema '$btname.rng' not found, skipping ..."
    fi
    echo -e "\n== Adding default values ..."
    if [ -f $btname.dsrl ] ; then
        xsltproc -o $dsrlxsl $xslt_dir/dsrl2xslt.xsl $btname.dsrl
	[[ $? == 0 ]] || fail
        xsltproc -o $instwdef $dsrlxsl $instance
	[[ $? == 0 ]] || fail
        inst4sch=$instwdef
        echo "Done."
    else
        echo "DSRL schema '$btname.dsrl' not found, no defaults added ..."
        inst4sch=$instance
    fi
    echo -e "\n== Validating semantic constraints ..."
    if [ -f $btname.sch ] ; then
        xsltproc $xslt_dir/iso_abstract_expand.xsl $btname.sch | \
            xsltproc -o $schxsl $xslt_dir/iso_svrl_for_xslt1.xsl -
        xsltproc $schxsl $inst4sch | xsltproc $xslt_dir/svrl2text.xsl -
	[[ $? == 0 ]] || fail
    else
        echo "Schematron schema '$btname.sch' not found, skipping ..."
    fi
}

cleanup () {
    rm -f $hybs $schxsl $dsrlxsl $instwdef
}

fail () {
    cleanup
    exit 2
}

while getopts ":ht:d:b:v:s" opt ; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        t)
            target=$OPTARG
            if [[ $target != "dstore" && $target != "get-reply" \
                && $target != "rpc" && $target != "rpc-reply" \
                && $target != "getconf-reply" && $target != "notif" ]]
            then
                echo "Invalid argument for -t: $target."
                exit 1
            fi
            ;;
        d)
            dir=$OPTARG
            if [ ! -d $dir ] ; then
                echo "Directory '$dir' doesn't exist."
                exit 1
            fi
            ;;
        b)
            basename=$OPTARG
            ;;
        v)
            instance=$OPTARG
            if [ ! -f $instance ] ; then
                echo "File '$instance' not found."
                exit 1
            fi
            ;;
        s)
            noschema=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG." >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument."
            ;;
    esac
done

if [[ $noschema == "1" && $instance == "" ]] ; then
    echo "Option -s may only be used together with -v."
    exit 1
fi

shift $(($OPTIND-1))
yam=$*
if [[ $yam == "" ]] ; then
    echo "No input file given." >&2
    usage
    exit 1
fi

randext=$(mktemp -u .XXXXXXXX)
hybs=$dir/dsdl$randext
schxsl=$dir/sch$randext
dsrlxsl=$dir/dsrl$randext
instwdef=$dir/inst$randext

if [[ $noschema == "0" ]] ; then
    if [ ! -w $dir ] ; then
        echo "Directory '$dir' not writable."
        exit 1
    fi
    pyang -f dsdl -o $hybs --dsdl-no-documentation \
        --dsdl-no-dublin-core $yam
    [[ $? == 0 ]] || fail
    if [[ $basename == "" ]] ; then
        basename=$(xsltproc $xslt_dir/basename.xsl $hybs)
    fi
elif [[ $basename == "" ]] ; then
    basename=$(pyang -f dsdl --dsdl-no-documentation \
        --dsdl-no-dublin-core $yam | xsltproc $xslt_dir/basename.xsl -)
    [[ $? == 0 ]] || fail
fi

btname=$dir/$basename-$target

if [[ $noschema == "0" ]] ; then
    gen_relaxng
    gen_schematron
    gen_dsrl
fi

if [[ $instance != "" ]] ; then
    validate
fi

cleanup
exit 0
